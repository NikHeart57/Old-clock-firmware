
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000007a0  00000834  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800062  00800062  00000836  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000836  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000868  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000df7  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064e  00000000  00000000  000016f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000850  00000000  00000000  00001d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00002594  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000427  00000000  00000000  00002644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007bc  00000000  00000000  00002a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00003227  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 37       	cpi	r26, 0x7D	; 125
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 55 03 	call	0x6aa	; 0x6aa <main>
  8a:	0c 94 ce 03 	jmp	0x79c	; 0x79c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <setup>:


void setup()
{
	// Настройка входа(0) выхода(1)
	DDRA  |= (0 << PA0)|(0 << PA1)|(0 << PA2);                        // Кнопки
  92:	8a b3       	in	r24, 0x1a	; 26
  94:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << PA0)|(1 << PA1)|(1 << PA2);
  96:	8b b3       	in	r24, 0x1b	; 27
  98:	87 60       	ori	r24, 0x07	; 7
  9a:	8b bb       	out	0x1b, r24	; 27
	DDRB  |= (1 << PB0)|(1 << PB1)|(1 << PB2)|(1 << PB3)|(1 << PB4);  // PB0-PB4 - Оптопары
  9c:	87 b3       	in	r24, 0x17	; 23
  9e:	8f 61       	ori	r24, 0x1F	; 31
  a0:	87 bb       	out	0x17, r24	; 23
	DDRD  |= (1 << PD0)|(1 << PD1)|(1 << PD2)|(1 << PD3)|(1 << PD4);  // PD0-PD3 - Дешифратор;  PD4 - OC1B PWM
  a2:	81 b3       	in	r24, 0x11	; 17
  a4:	8f 61       	ori	r24, 0x1F	; 31
  a6:	81 bb       	out	0x11, r24	; 17
	
	// Настойка таймера 0 (Часы)
	sei();
  a8:	78 94       	sei
	TCCR0 |= (0 << FOC0) |(1  << WGM01)|(0 << WGM00)|(0 << COM01)|(0 << COM00)|(1 << CS02)|(0 << CS01)|(1 << CS00); // WGM = 10 - CTC mode / COM = 00 - пин откл / CS = 101 - Прескелер 1024
  aa:	83 b7       	in	r24, 0x33	; 51
  ac:	8d 60       	ori	r24, 0x0D	; 13
  ae:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << OCIE0)|(0 << TOIE0); // OCIE0 = 1 - разрешает вызов прерывания TIMER0_COMP_vect
  b0:	89 b7       	in	r24, 0x39	; 57
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	89 bf       	out	0x39, r24	; 57
	OCR0 = 239; // Число прерывания
  b6:	8f ee       	ldi	r24, 0xEF	; 239
  b8:	8c bf       	out	0x3c, r24	; 60
	
	// Настройа таймера 1 (PWM)
	sei();
  ba:	78 94       	sei
	TCCR1A |= (0 << COM1A1)|(0 << COM1A0)|(1 << COM1B1)|(0 << COM1B0)|(0 << FOC1A)|(0 << FOC1B)|(0 << WGM11)|(0 << WGM10);
  bc:	8f b5       	in	r24, 0x2f	; 47
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (0 << ICNC1) |(0 << ICES1) |(1 << WGM13) |(0 << WGM12) |(0 << CS12) |(0 << CS11) |(1 << CS10);
  c2:	8e b5       	in	r24, 0x2e	; 46
  c4:	81 61       	ori	r24, 0x11	; 17
  c6:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 150;  // Верхнее значение, до которого идет счет - 75
  c8:	86 e9       	ldi	r24, 0x96	; 150
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	97 bd       	out	0x27, r25	; 39
  ce:	86 bd       	out	0x26, r24	; 38
	OCR1B = 147; // Регистр сравнения, при совпадении с которым меняется состояние вывода OC1B - 73
  d0:	83 e9       	ldi	r24, 0x93	; 147
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	99 bd       	out	0x29, r25	; 41
  d6:	88 bd       	out	0x28, r24	; 40
  d8:	08 95       	ret

000000da <Mode0>:
		const int length = 7;				// Не следует использовать значения кратные 10. Это нужно чтобы избегать периодов длительностью ~500мс
		const int INDICATION = 37;			// length = 7; INDICATION = 37; PAUSE = 151; - экспериментально подобраны и работают хорошо
		const int PAUSE = 151;
		
		
		PORTB = (TimeParity << 4);
  da:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <TimeParity>
  de:	82 95       	swap	r24
  e0:	80 7f       	andi	r24, 0xF0	; 240
  e2:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	83 ea       	ldi	r24, 0xA3	; 163
  e6:	98 e0       	ldi	r25, 0x08	; 8
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <Mode0+0xe>
  ec:	00 c0       	rjmp	.+0      	; 0xee <Mode0+0x14>
  ee:	00 00       	nop
		_delay_us(1200);					// При length = 7; INDICATION = 37; PAUSE = 151; - _delay_us(1200);
		
		
		PORTD = TimeCurrent[2 - Shift] % 10;
  f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f4:	e2 e0       	ldi	r30, 0x02	; 2
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	e8 1b       	sub	r30, r24
  fa:	f1 09       	sbc	r31, r1
  fc:	eb 59       	subi	r30, 0x9B	; 155
  fe:	ff 4f       	sbci	r31, 0xFF	; 255
 100:	20 81       	ld	r18, Z
 102:	8d ec       	ldi	r24, 0xCD	; 205
 104:	28 9f       	mul	r18, r24
 106:	81 2d       	mov	r24, r1
 108:	11 24       	eor	r1, r1
 10a:	86 95       	lsr	r24
 10c:	86 95       	lsr	r24
 10e:	86 95       	lsr	r24
 110:	88 0f       	add	r24, r24
 112:	98 2f       	mov	r25, r24
 114:	99 0f       	add	r25, r25
 116:	99 0f       	add	r25, r25
 118:	89 0f       	add	r24, r25
 11a:	28 1b       	sub	r18, r24
 11c:	22 bb       	out	0x12, r18	; 18
		for (int i = 0; i < length; i++)
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0c c0       	rjmp	.+24     	; 0x13c <Mode0+0x62>
		{
			PORTB = (1 << 0);
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	28 bb       	out	0x18, r18	; 24
 128:	eb e5       	ldi	r30, 0x5B	; 91
 12a:	ea 95       	dec	r30
 12c:	f1 f7       	brne	.-4      	; 0x12a <Mode0+0x50>
			_delay_us(INDICATION);
			PORTB = (0 << 0);
 12e:	18 ba       	out	0x18, r1	; 24
 130:	e6 e1       	ldi	r30, 0x16	; 22
 132:	f1 e0       	ldi	r31, 0x01	; 1
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <Mode0+0x5a>
 138:	00 00       	nop
		PORTB = (TimeParity << 4);
		_delay_us(1200);					// При length = 7; INDICATION = 37; PAUSE = 151; - _delay_us(1200);
		
		
		PORTD = TimeCurrent[2 - Shift] % 10;
		for (int i = 0; i < length; i++)
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	87 30       	cpi	r24, 0x07	; 7
 13e:	91 05       	cpc	r25, r1
 140:	8c f3       	brlt	.-30     	; 0x124 <Mode0+0x4a>
			PORTB = (0 << 0);
			_delay_us(PAUSE);
		}
		
		
		PORTD = (TimeCurrent[2 - Shift] - TimeCurrent[2 - Shift] % 10) / 10;
 142:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 146:	e2 e0       	ldi	r30, 0x02	; 2
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	e8 1b       	sub	r30, r24
 14c:	f1 09       	sbc	r31, r1
 14e:	eb 59       	subi	r30, 0x9B	; 155
 150:	ff 4f       	sbci	r31, 0xFF	; 255
 152:	80 81       	ld	r24, Z
 154:	9d ec       	ldi	r25, 0xCD	; 205
 156:	89 9f       	mul	r24, r25
 158:	91 2d       	mov	r25, r1
 15a:	11 24       	eor	r1, r1
 15c:	96 95       	lsr	r25
 15e:	96 95       	lsr	r25
 160:	96 95       	lsr	r25
 162:	99 0f       	add	r25, r25
 164:	29 2f       	mov	r18, r25
 166:	22 0f       	add	r18, r18
 168:	22 0f       	add	r18, r18
 16a:	92 0f       	add	r25, r18
 16c:	28 2f       	mov	r18, r24
 16e:	29 1b       	sub	r18, r25
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	82 1b       	sub	r24, r18
 174:	91 09       	sbc	r25, r1
 176:	6a e0       	ldi	r22, 0x0A	; 10
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	0e 94 a6 03 	call	0x74c	; 0x74c <__divmodhi4>
 17e:	62 bb       	out	0x12, r22	; 18
		for (int i = 0; i < length; i++)
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0c c0       	rjmp	.+24     	; 0x19e <Mode0+0xc4>
		{
			PORTB = (1 << 1);
 186:	22 e0       	ldi	r18, 0x02	; 2
 188:	28 bb       	out	0x18, r18	; 24
 18a:	fb e5       	ldi	r31, 0x5B	; 91
 18c:	fa 95       	dec	r31
 18e:	f1 f7       	brne	.-4      	; 0x18c <Mode0+0xb2>
			_delay_us(INDICATION);
			PORTB = (0 << 1);
 190:	18 ba       	out	0x18, r1	; 24
 192:	e6 e1       	ldi	r30, 0x16	; 22
 194:	f1 e0       	ldi	r31, 0x01	; 1
 196:	31 97       	sbiw	r30, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <Mode0+0xbc>
 19a:	00 00       	nop
			_delay_us(PAUSE);
		}
		
		
		PORTD = (TimeCurrent[2 - Shift] - TimeCurrent[2 - Shift] % 10) / 10;
		for (int i = 0; i < length; i++)
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	87 30       	cpi	r24, 0x07	; 7
 1a0:	91 05       	cpc	r25, r1
 1a2:	8c f3       	brlt	.-30     	; 0x186 <Mode0+0xac>
			PORTB = (0 << 1);
			_delay_us(PAUSE);
		};
		

		PORTD = TimeCurrent[1 - Shift] % 10;
 1a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a8:	e1 e0       	ldi	r30, 0x01	; 1
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	e8 1b       	sub	r30, r24
 1ae:	f1 09       	sbc	r31, r1
 1b0:	eb 59       	subi	r30, 0x9B	; 155
 1b2:	ff 4f       	sbci	r31, 0xFF	; 255
 1b4:	20 81       	ld	r18, Z
 1b6:	8d ec       	ldi	r24, 0xCD	; 205
 1b8:	28 9f       	mul	r18, r24
 1ba:	81 2d       	mov	r24, r1
 1bc:	11 24       	eor	r1, r1
 1be:	86 95       	lsr	r24
 1c0:	86 95       	lsr	r24
 1c2:	86 95       	lsr	r24
 1c4:	88 0f       	add	r24, r24
 1c6:	98 2f       	mov	r25, r24
 1c8:	99 0f       	add	r25, r25
 1ca:	99 0f       	add	r25, r25
 1cc:	89 0f       	add	r24, r25
 1ce:	28 1b       	sub	r18, r24
 1d0:	22 bb       	out	0x12, r18	; 18
		for (int i = 0; i < length; i++)
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0c c0       	rjmp	.+24     	; 0x1f0 <Mode0+0x116>
		{
			PORTB = (1 << 2);
 1d8:	24 e0       	ldi	r18, 0x04	; 4
 1da:	28 bb       	out	0x18, r18	; 24
 1dc:	fb e5       	ldi	r31, 0x5B	; 91
 1de:	fa 95       	dec	r31
 1e0:	f1 f7       	brne	.-4      	; 0x1de <Mode0+0x104>
			_delay_us(INDICATION);
			PORTB = (0 << 2);
 1e2:	18 ba       	out	0x18, r1	; 24
 1e4:	e6 e1       	ldi	r30, 0x16	; 22
 1e6:	f1 e0       	ldi	r31, 0x01	; 1
 1e8:	31 97       	sbiw	r30, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <Mode0+0x10e>
 1ec:	00 00       	nop
			_delay_us(PAUSE);
		};
		

		PORTD = TimeCurrent[1 - Shift] % 10;
		for (int i = 0; i < length; i++)
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	87 30       	cpi	r24, 0x07	; 7
 1f2:	91 05       	cpc	r25, r1
 1f4:	8c f3       	brlt	.-30     	; 0x1d8 <Mode0+0xfe>
			PORTB = (0 << 2);
			_delay_us(PAUSE);
		}
			
			
		PORTD = (TimeCurrent[1 - Shift] - TimeCurrent[1 - Shift] % 10) / 10;
 1f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1fa:	e1 e0       	ldi	r30, 0x01	; 1
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	e8 1b       	sub	r30, r24
 200:	f1 09       	sbc	r31, r1
 202:	eb 59       	subi	r30, 0x9B	; 155
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	80 81       	ld	r24, Z
 208:	9d ec       	ldi	r25, 0xCD	; 205
 20a:	89 9f       	mul	r24, r25
 20c:	91 2d       	mov	r25, r1
 20e:	11 24       	eor	r1, r1
 210:	96 95       	lsr	r25
 212:	96 95       	lsr	r25
 214:	96 95       	lsr	r25
 216:	99 0f       	add	r25, r25
 218:	29 2f       	mov	r18, r25
 21a:	22 0f       	add	r18, r18
 21c:	22 0f       	add	r18, r18
 21e:	92 0f       	add	r25, r18
 220:	28 2f       	mov	r18, r24
 222:	29 1b       	sub	r18, r25
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	82 1b       	sub	r24, r18
 228:	91 09       	sbc	r25, r1
 22a:	6a e0       	ldi	r22, 0x0A	; 10
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	0e 94 a6 03 	call	0x74c	; 0x74c <__divmodhi4>
 232:	62 bb       	out	0x12, r22	; 18
		for (int i = 0; i < length; i++)
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0c c0       	rjmp	.+24     	; 0x252 <Mode0+0x178>
		{
			PORTB = (1 << 3);
 23a:	28 e0       	ldi	r18, 0x08	; 8
 23c:	28 bb       	out	0x18, r18	; 24
 23e:	fb e5       	ldi	r31, 0x5B	; 91
 240:	fa 95       	dec	r31
 242:	f1 f7       	brne	.-4      	; 0x240 <Mode0+0x166>
			_delay_us(INDICATION);
			PORTB = (0 << 3);
 244:	18 ba       	out	0x18, r1	; 24
 246:	e6 e1       	ldi	r30, 0x16	; 22
 248:	f1 e0       	ldi	r31, 0x01	; 1
 24a:	31 97       	sbiw	r30, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <Mode0+0x170>
 24e:	00 00       	nop
			_delay_us(PAUSE);
		}
			
			
		PORTD = (TimeCurrent[1 - Shift] - TimeCurrent[1 - Shift] % 10) / 10;
		for (int i = 0; i < length; i++)
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	87 30       	cpi	r24, 0x07	; 7
 254:	91 05       	cpc	r25, r1
 256:	8c f3       	brlt	.-30     	; 0x23a <Mode0+0x160>
			_delay_us(INDICATION);
			PORTB = (0 << 3);
			_delay_us(PAUSE);
		}	
		
}
 258:	08 95       	ret

0000025a <Mode1>:

void Mode1()    // Настройки
{
	// Остановка мигалки на время действия режима настройки
	PORTB = 0 << 4;
 25a:	18 ba       	out	0x18, r1	; 24
 25c:	88 e2       	ldi	r24, 0x28	; 40
 25e:	92 e0       	ldi	r25, 0x02	; 2
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <Mode1+0x6>
 264:	00 c0       	rjmp	.+0      	; 0x266 <Mode1+0xc>
 266:	00 00       	nop
	_delay_us(300);
		
	// Setting определяет значения чего (sec, min, hour) выводятся в младшие лампы
	PORTD = TimeSetting[Setting] % 10;
 268:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <Setting>
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	ee 59       	subi	r30, 0x9E	; 158
 270:	ff 4f       	sbci	r31, 0xFF	; 255
 272:	30 81       	ld	r19, Z
 274:	9d ec       	ldi	r25, 0xCD	; 205
 276:	39 9f       	mul	r19, r25
 278:	81 2d       	mov	r24, r1
 27a:	11 24       	eor	r1, r1
 27c:	86 95       	lsr	r24
 27e:	86 95       	lsr	r24
 280:	86 95       	lsr	r24
 282:	88 0f       	add	r24, r24
 284:	28 2f       	mov	r18, r24
 286:	22 0f       	add	r18, r18
 288:	22 0f       	add	r18, r18
 28a:	82 0f       	add	r24, r18
 28c:	38 1b       	sub	r19, r24
 28e:	32 bb       	out	0x12, r19	; 18
	PORTB = (1 << 0);
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	88 bb       	out	0x18, r24	; 24
 294:	e6 ef       	ldi	r30, 0xF6	; 246
 296:	ea 95       	dec	r30
 298:	f1 f7       	brne	.-4      	; 0x296 <Mode1+0x3c>
	_delay_us(100);
	PORTB = (0 << 0);
 29a:	18 ba       	out	0x18, r1	; 24
 29c:	e1 ee       	ldi	r30, 0xE1	; 225
 29e:	f2 e0       	ldi	r31, 0x02	; 2
 2a0:	31 97       	sbiw	r30, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <Mode1+0x46>
 2a4:	00 00       	nop
	_delay_us(400);
	
	PORTD = (TimeSetting[Setting] - TimeSetting[Setting] % 10) / 10;
 2a6:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <Setting>
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	ee 59       	subi	r30, 0x9E	; 158
 2ae:	ff 4f       	sbci	r31, 0xFF	; 255
 2b0:	80 81       	ld	r24, Z
 2b2:	89 9f       	mul	r24, r25
 2b4:	91 2d       	mov	r25, r1
 2b6:	11 24       	eor	r1, r1
 2b8:	96 95       	lsr	r25
 2ba:	96 95       	lsr	r25
 2bc:	96 95       	lsr	r25
 2be:	99 0f       	add	r25, r25
 2c0:	29 2f       	mov	r18, r25
 2c2:	22 0f       	add	r18, r18
 2c4:	22 0f       	add	r18, r18
 2c6:	92 0f       	add	r25, r18
 2c8:	28 2f       	mov	r18, r24
 2ca:	29 1b       	sub	r18, r25
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	82 1b       	sub	r24, r18
 2d0:	91 09       	sbc	r25, r1
 2d2:	6a e0       	ldi	r22, 0x0A	; 10
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	0e 94 a6 03 	call	0x74c	; 0x74c <__divmodhi4>
 2da:	62 bb       	out	0x12, r22	; 18
	PORTB = (1 << 1);
 2dc:	82 e0       	ldi	r24, 0x02	; 2
 2de:	88 bb       	out	0x18, r24	; 24
 2e0:	f6 ef       	ldi	r31, 0xF6	; 246
 2e2:	fa 95       	dec	r31
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <Mode1+0x88>
	_delay_us(100);
	PORTB = (0 << 1);
 2e6:	18 ba       	out	0x18, r1	; 24
 2e8:	81 ee       	ldi	r24, 0xE1	; 225
 2ea:	92 e0       	ldi	r25, 0x02	; 2
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <Mode1+0x92>
 2f0:	00 00       	nop
	_delay_us(400);
	
	
	// Вывод в лампу 4 текущего Setting
	PORTD = Setting;
 2f2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Setting>
 2f6:	82 bb       	out	0x12, r24	; 18
	PORTB = (1 << 3);
 2f8:	88 e0       	ldi	r24, 0x08	; 8
 2fa:	88 bb       	out	0x18, r24	; 24
 2fc:	96 ef       	ldi	r25, 0xF6	; 246
 2fe:	9a 95       	dec	r25
 300:	f1 f7       	brne	.-4      	; 0x2fe <Mode1+0xa4>
	_delay_us(100);
	PORTB = (0 << 3);
 302:	18 ba       	out	0x18, r1	; 24
 304:	e1 ee       	ldi	r30, 0xE1	; 225
 306:	f2 e0       	ldi	r31, 0x02	; 2
 308:	31 97       	sbiw	r30, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <Mode1+0xae>
 30c:	00 00       	nop
 30e:	08 95       	ret

00000310 <ButtonPA0>:
}

void ButtonPA0 ()
{
	// Кнопка PA0
	if (!(PINA & (1 << PINA0)))        		    	  	  	 // Кнопка нажата
 310:	c8 99       	sbic	0x19, 0	; 25
 312:	74 c0       	rjmp	.+232    	; 0x3fc <ButtonPA0+0xec>
	{
		if (HeatPA0 < 100)                		  	  	     // Паралельно при нажатии начинается нагрев кнопки; 1 секунда это примерно 1000 Heat
 314:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <HeatPA0>
 318:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <HeatPA0+0x1>
 31c:	84 36       	cpi	r24, 0x64	; 100
 31e:	91 05       	cpc	r25, r1
 320:	40 f4       	brcc	.+16     	; 0x332 <ButtonPA0+0x22>
		{ 
			HeatPA0++;
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <HeatPA0+0x1>
 328:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <HeatPA0>
 32c:	8b e7       	ldi	r24, 0x7B	; 123
 32e:	8a 95       	dec	r24
 330:	f1 f7       	brne	.-4      	; 0x32e <ButtonPA0+0x1e>
			_delay_us(50);
		}	
				
		if (HeatPA0 >= 100 && DisconnectorHeatPA0 == 0 && Mode != 1) 	 // Кнопка нагрелась // Mode != 1 - защита от прокручивания горячей кнопки
 332:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <HeatPA0>
 336:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <HeatPA0+0x1>
 33a:	84 36       	cpi	r24, 0x64	; 100
 33c:	91 05       	cpc	r25, r1
 33e:	40 f1       	brcs	.+80     	; 0x390 <ButtonPA0+0x80>
 340:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <DisconnectorHeatPA0>
 344:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <DisconnectorHeatPA0+0x1>
 348:	89 2b       	or	r24, r25
 34a:	11 f5       	brne	.+68     	; 0x390 <ButtonPA0+0x80>
 34c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Mode>
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	f1 f0       	breq	.+60     	; 0x390 <ButtonPA0+0x80>
		{
			DisconnectorHeatPA0 = 100;                        // Дисконнектор горячей кнопки
 354:	24 e6       	ldi	r18, 0x64	; 100
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	30 93 7c 00 	sts	0x007C, r19	; 0x80007c <DisconnectorHeatPA0+0x1>
 35c:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <DisconnectorHeatPA0>
			// Код горячей кнопки
			Mode++;
 360:	8f 5f       	subi	r24, 0xFF	; 255
 362:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Mode>
			Setting = 0;
 366:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <Setting>
			
			if (Mode == 1)
 36a:	81 30       	cpi	r24, 0x01	; 1
 36c:	69 f4       	brne	.+26     	; 0x388 <ButtonPA0+0x78>
			{
				TimeSetting[0] = TimeCurrent[0];
 36e:	a5 e6       	ldi	r26, 0x65	; 101
 370:	b0 e0       	ldi	r27, 0x00	; 0
 372:	9c 91       	ld	r25, X
 374:	e2 e6       	ldi	r30, 0x62	; 98
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	90 83       	st	Z, r25
				TimeSetting[1] = TimeCurrent[1];
 37a:	11 96       	adiw	r26, 0x01	; 1
 37c:	9c 91       	ld	r25, X
 37e:	11 97       	sbiw	r26, 0x01	; 1
 380:	91 83       	std	Z+1, r25	; 0x01
				TimeSetting[2] = TimeCurrent[2];				
 382:	12 96       	adiw	r26, 0x02	; 2
 384:	9c 91       	ld	r25, X
 386:	92 83       	std	Z+2, r25	; 0x02
			}			
			
		
			if (Mode > 1)
 388:	82 30       	cpi	r24, 0x02	; 2
 38a:	10 f0       	brcs	.+4      	; 0x390 <ButtonPA0+0x80>
			{
				Mode = 0;
 38c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Mode>
				Setting = 0;
			}

		}
		
		if (DisconnectorPA0 == 0)
 390:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <DisconnectorPA0>
 394:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <DisconnectorPA0+0x1>
 398:	89 2b       	or	r24, r25
 39a:	09 f0       	breq	.+2      	; 0x39e <ButtonPA0+0x8e>
 39c:	5b c0       	rjmp	.+182    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
		{
			DisconnectorPA0 = 100;                             // Дисконнектор холодной кнопки
 39e:	84 e6       	ldi	r24, 0x64	; 100
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <DisconnectorPA0+0x1>
 3a6:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <DisconnectorPA0>
	   	    // Код холодной кнопки
			Setting++;
 3aa:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Setting>
 3ae:	8f 5f       	subi	r24, 0xFF	; 255
 3b0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Setting>
			if (Mode == 0 && Setting > 2)
 3b4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Mode>
 3b8:	91 11       	cpse	r25, r1
 3ba:	04 c0       	rjmp	.+8      	; 0x3c4 <ButtonPA0+0xb4>
 3bc:	83 30       	cpi	r24, 0x03	; 3
 3be:	10 f0       	brcs	.+4      	; 0x3c4 <ButtonPA0+0xb4>
			{
				Setting = 0;
 3c0:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <Setting>
			}
			
			// Особый случай когда завершается настройка часов и требуется немедленное исполнение
			if (Mode == 1 && Setting > 2)
 3c4:	91 30       	cpi	r25, 0x01	; 1
 3c6:	09 f0       	breq	.+2      	; 0x3ca <ButtonPA0+0xba>
 3c8:	45 c0       	rjmp	.+138    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 3ca:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Setting>
 3ce:	83 30       	cpi	r24, 0x03	; 3
 3d0:	08 f4       	brcc	.+2      	; 0x3d4 <ButtonPA0+0xc4>
 3d2:	40 c0       	rjmp	.+128    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
			{
				Setting = 0;
 3d4:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <Setting>
				Mode = 0;
 3d8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Mode>
				TimeCurrent[0] = TimeSetting[0];
 3dc:	a2 e6       	ldi	r26, 0x62	; 98
 3de:	b0 e0       	ldi	r27, 0x00	; 0
 3e0:	8c 91       	ld	r24, X
 3e2:	e5 e6       	ldi	r30, 0x65	; 101
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 83       	st	Z, r24
				TimeCurrent[1] = TimeSetting[1];
 3e8:	11 96       	adiw	r26, 0x01	; 1
 3ea:	8c 91       	ld	r24, X
 3ec:	11 97       	sbiw	r26, 0x01	; 1
 3ee:	81 83       	std	Z+1, r24	; 0x01
				TimeCurrent[2] = TimeSetting[2];
 3f0:	12 96       	adiw	r26, 0x02	; 2
 3f2:	8c 91       	ld	r24, X
 3f4:	82 83       	std	Z+2, r24	; 0x02
				TimeCounter = 0; 
 3f6:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <TimeCounter>
 3fa:	08 95       	ret
		}
	}	
	// Кнопка отпущена
	else
	{
		if (DisconnectorPA0 > 0)
 3fc:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <DisconnectorPA0>
 400:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <DisconnectorPA0+0x1>
 404:	89 2b       	or	r24, r25
 406:	81 f0       	breq	.+32     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 408:	8b e7       	ldi	r24, 0x7B	; 123
 40a:	8a 95       	dec	r24
 40c:	f1 f7       	brne	.-4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		{
			_delay_us(50);
			DisconnectorPA0--;
 40e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <DisconnectorPA0>
 412:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <DisconnectorPA0+0x1>
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <DisconnectorPA0+0x1>
 41c:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <DisconnectorPA0>
			HeatPA0 = 0;
 420:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <HeatPA0+0x1>
 424:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <HeatPA0>
		}
		
		if (DisconnectorHeatPA0 > 0)
 428:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <DisconnectorHeatPA0>
 42c:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <DisconnectorHeatPA0+0x1>
 430:	89 2b       	or	r24, r25
 432:	81 f0       	breq	.+32     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 434:	8b e7       	ldi	r24, 0x7B	; 123
 436:	8a 95       	dec	r24
 438:	f1 f7       	brne	.-4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		{
			_delay_us(50);
			DisconnectorHeatPA0--;
 43a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <DisconnectorHeatPA0>
 43e:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <DisconnectorHeatPA0+0x1>
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <DisconnectorHeatPA0+0x1>
 448:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <DisconnectorHeatPA0>
			HeatPA0 = 0;	
 44c:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <HeatPA0+0x1>
 450:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <HeatPA0>
 454:	08 95       	ret

00000456 <ButtonPA1>:


void ButtonPA1 ()
{
	// Кнопка PA1
	if (!(PINA & (1 << PINA1)))        		    	  	  	 // Кнопка нажата
 456:	c9 99       	sbic	0x19, 1	; 25
 458:	65 c0       	rjmp	.+202    	; 0x524 <ButtonPA1+0xce>
	{
		if (HeatPA1 < 1000)                		  	  	   	 // Паралельно при нажатии начинается нагрев кнопки
 45a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <HeatPA1>
 45e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <HeatPA1+0x1>
 462:	88 3e       	cpi	r24, 0xE8	; 232
 464:	23 e0       	ldi	r18, 0x03	; 3
 466:	92 07       	cpc	r25, r18
 468:	40 f4       	brcc	.+16     	; 0x47a <ButtonPA1+0x24>
		{
			HeatPA1++;
 46a:	01 96       	adiw	r24, 0x01	; 1
 46c:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <HeatPA1+0x1>
 470:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <HeatPA1>
 474:	8b e7       	ldi	r24, 0x7B	; 123
 476:	8a 95       	dec	r24
 478:	f1 f7       	brne	.-4      	; 0x476 <ButtonPA1+0x20>
			_delay_us(50);
		}
		
		if (HeatPA1 == 1000 && DisconnectorHeatPA1 == 0) 	 // Кнопка нагрелась
 47a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <HeatPA1>
 47e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <HeatPA1+0x1>
 482:	88 3e       	cpi	r24, 0xE8	; 232
 484:	93 40       	sbci	r25, 0x03	; 3
 486:	61 f4       	brne	.+24     	; 0x4a0 <ButtonPA1+0x4a>
 488:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <DisconnectorHeatPA1>
 48c:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <DisconnectorHeatPA1+0x1>
 490:	89 2b       	or	r24, r25
 492:	31 f4       	brne	.+12     	; 0x4a0 <ButtonPA1+0x4a>
		{
			DisconnectorHeatPA1 = 40;                        // Дисконнектор горячей кнопки
 494:	88 e2       	ldi	r24, 0x28	; 40
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <DisconnectorHeatPA1+0x1>
 49c:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <DisconnectorHeatPA1>
			{				
			}

		}
		
		if (DisconnectorPA1 == 0)
 4a0:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <DisconnectorPA1>
 4a4:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <DisconnectorPA1+0x1>
 4a8:	89 2b       	or	r24, r25
 4aa:	09 f0       	breq	.+2      	; 0x4ae <ButtonPA1+0x58>
 4ac:	67 c0       	rjmp	.+206    	; 0x57c <ButtonPA1+0x126>
		{
			DisconnectorPA1 = 40;                            // Дисконнектор холодной кнопки		
 4ae:	88 e2       	ldi	r24, 0x28	; 40
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <DisconnectorPA1+0x1>
 4b6:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <DisconnectorPA1>
			// Код холодной кнопки Mode = 0                  // Mode = 0 - Индикация
			if (Mode == 0)                   
 4ba:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Mode>
 4be:	81 11       	cpse	r24, r1
 4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <ButtonPA1+0x72>
			{
				Shift = 1;	
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
			}

			
			// Код холодной кнопки Mode = 1                  // Mode = 1 - Настройки
			if (Mode == 1 && Setting == 0)                   // Инкремент часов 
 4c8:	81 30       	cpi	r24, 0x01	; 1
 4ca:	69 f4       	brne	.+26     	; 0x4e6 <ButtonPA1+0x90>
 4cc:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <Setting>
 4d0:	91 11       	cpse	r25, r1
 4d2:	09 c0       	rjmp	.+18     	; 0x4e6 <ButtonPA1+0x90>
			{
				TimeSetting[0]++;
 4d4:	e2 e6       	ldi	r30, 0x62	; 98
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	90 81       	ld	r25, Z
 4da:	9f 5f       	subi	r25, 0xFF	; 255
 4dc:	90 83       	st	Z, r25
				if (TimeSetting[0] > 23)
 4de:	98 31       	cpi	r25, 0x18	; 24
 4e0:	10 f0       	brcs	.+4      	; 0x4e6 <ButtonPA1+0x90>
				{
					TimeSetting[0] = 0;
 4e2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
				}
			}
			
			if (Mode == 1 && Setting == 1)                   // Инкремент минут
 4e6:	81 30       	cpi	r24, 0x01	; 1
 4e8:	69 f4       	brne	.+26     	; 0x504 <ButtonPA1+0xae>
 4ea:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <Setting>
 4ee:	91 30       	cpi	r25, 0x01	; 1
 4f0:	49 f4       	brne	.+18     	; 0x504 <ButtonPA1+0xae>
			{
				TimeSetting[1]++;
 4f2:	e2 e6       	ldi	r30, 0x62	; 98
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	91 81       	ldd	r25, Z+1	; 0x01
 4f8:	9f 5f       	subi	r25, 0xFF	; 255
 4fa:	91 83       	std	Z+1, r25	; 0x01
				if (TimeSetting[1] > 59)
 4fc:	9c 33       	cpi	r25, 0x3C	; 60
 4fe:	10 f0       	brcs	.+4      	; 0x504 <ButtonPA1+0xae>
				{
					TimeSetting[1] = 0;
 500:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
				}				
				
			}
			
			if (Mode == 1 && Setting == 2)                   // Инкремент секунд
 504:	81 30       	cpi	r24, 0x01	; 1
 506:	d1 f5       	brne	.+116    	; 0x57c <ButtonPA1+0x126>
 508:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Setting>
 50c:	82 30       	cpi	r24, 0x02	; 2
 50e:	b1 f5       	brne	.+108    	; 0x57c <ButtonPA1+0x126>
			{
				TimeSetting[2]++;
 510:	e2 e6       	ldi	r30, 0x62	; 98
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	82 81       	ldd	r24, Z+2	; 0x02
 516:	8f 5f       	subi	r24, 0xFF	; 255
 518:	82 83       	std	Z+2, r24	; 0x02
				if (TimeSetting[2] > 59)
 51a:	8c 33       	cpi	r24, 0x3C	; 60
 51c:	78 f1       	brcs	.+94     	; 0x57c <ButtonPA1+0x126>
				{
					TimeSetting[2] = 0;
 51e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end+0x2>
 522:	08 95       	ret
		}
	}
	// Кнопка отпущена
	else
	{
		if (DisconnectorPA1 > 0)
 524:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <DisconnectorPA1>
 528:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <DisconnectorPA1+0x1>
 52c:	89 2b       	or	r24, r25
 52e:	81 f0       	breq	.+32     	; 0x550 <ButtonPA1+0xfa>
 530:	8b e7       	ldi	r24, 0x7B	; 123
 532:	8a 95       	dec	r24
 534:	f1 f7       	brne	.-4      	; 0x532 <ButtonPA1+0xdc>
		{
			_delay_us(50);
			DisconnectorPA1--;
 536:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <DisconnectorPA1>
 53a:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <DisconnectorPA1+0x1>
 53e:	01 97       	sbiw	r24, 0x01	; 1
 540:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <DisconnectorPA1+0x1>
 544:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <DisconnectorPA1>
			HeatPA1 = 0;
 548:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <HeatPA1+0x1>
 54c:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <HeatPA1>
		}
		
		if (DisconnectorHeatPA1 > 0)
 550:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <DisconnectorHeatPA1>
 554:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <DisconnectorHeatPA1+0x1>
 558:	89 2b       	or	r24, r25
 55a:	81 f0       	breq	.+32     	; 0x57c <ButtonPA1+0x126>
 55c:	2b e7       	ldi	r18, 0x7B	; 123
 55e:	2a 95       	dec	r18
 560:	f1 f7       	brne	.-4      	; 0x55e <ButtonPA1+0x108>
		{
			_delay_us(50);
			DisconnectorHeatPA1--;
 562:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <DisconnectorHeatPA1>
 566:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <DisconnectorHeatPA1+0x1>
 56a:	01 97       	sbiw	r24, 0x01	; 1
 56c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <DisconnectorHeatPA1+0x1>
 570:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <DisconnectorHeatPA1>
			HeatPA1 = 0;
 574:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <HeatPA1+0x1>
 578:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <HeatPA1>
 57c:	08 95       	ret

0000057e <ButtonPA2>:


void ButtonPA2 ()
{
	// Кнопка PA2
	if (!(PINA & (1 << PINA2)))        		    	  	  	 // Кнопка нажата
 57e:	ca 99       	sbic	0x19, 2	; 25
 580:	67 c0       	rjmp	.+206    	; 0x650 <ButtonPA2+0xd2>
	{
		if (HeatPA2 < 1000)                		  	  	   	 // Паралельно при нажатии начинается нагрев кнопки
 582:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <HeatPA2>
 586:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <HeatPA2+0x1>
 58a:	88 3e       	cpi	r24, 0xE8	; 232
 58c:	23 e0       	ldi	r18, 0x03	; 3
 58e:	92 07       	cpc	r25, r18
 590:	40 f4       	brcc	.+16     	; 0x5a2 <ButtonPA2+0x24>
		{
			HeatPA2++;
 592:	01 96       	adiw	r24, 0x01	; 1
 594:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <HeatPA2+0x1>
 598:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <HeatPA2>
 59c:	8b e7       	ldi	r24, 0x7B	; 123
 59e:	8a 95       	dec	r24
 5a0:	f1 f7       	brne	.-4      	; 0x59e <ButtonPA2+0x20>
			_delay_us(50);
		}
		
		if (HeatPA2 == 1000 && DisconnectorHeatPA2 == 0) 	 // Кнопка нагрелась
 5a2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <HeatPA2>
 5a6:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <HeatPA2+0x1>
 5aa:	88 3e       	cpi	r24, 0xE8	; 232
 5ac:	93 40       	sbci	r25, 0x03	; 3
 5ae:	61 f4       	brne	.+24     	; 0x5c8 <ButtonPA2+0x4a>
 5b0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <DisconnectorHeatPA2>
 5b4:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <DisconnectorHeatPA2+0x1>
 5b8:	89 2b       	or	r24, r25
 5ba:	31 f4       	brne	.+12     	; 0x5c8 <ButtonPA2+0x4a>
		{
			DisconnectorHeatPA2 = 40;                        // Дисконнектор горячей кнопки
 5bc:	88 e2       	ldi	r24, 0x28	; 40
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <DisconnectorHeatPA2+0x1>
 5c4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <DisconnectorHeatPA2>
			{
			}

		}
		
		if (DisconnectorPA2 == 0)
 5c8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <DisconnectorPA2>
 5cc:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <DisconnectorPA2+0x1>
 5d0:	89 2b       	or	r24, r25
 5d2:	09 f0       	breq	.+2      	; 0x5d6 <ButtonPA2+0x58>
 5d4:	69 c0       	rjmp	.+210    	; 0x6a8 <ButtonPA2+0x12a>
		{
			DisconnectorPA2 = 40;                            // Дисконнектор холодной кнопки
 5d6:	88 e2       	ldi	r24, 0x28	; 40
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <DisconnectorPA2+0x1>
 5de:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <DisconnectorPA2>
			// Код холодной кнопки Mode = 0                  // Mode = 0 - Индикация
			if (Mode == 0)                  
 5e2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Mode>
 5e6:	81 11       	cpse	r24, r1
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <ButtonPA2+0x70>
			{
				Shift = 0;
 5ea:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			
			
			// Код холодной кнопки Mode = 1                  // Mode = 1 - Настройки
			if (Mode == 1 && Setting == 0)                   // Декремент часов
 5ee:	81 30       	cpi	r24, 0x01	; 1
 5f0:	71 f4       	brne	.+28     	; 0x60e <ButtonPA2+0x90>
 5f2:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <Setting>
 5f6:	91 11       	cpse	r25, r1
 5f8:	0a c0       	rjmp	.+20     	; 0x60e <ButtonPA2+0x90>
			{
				TimeSetting[0]--;
 5fa:	e2 e6       	ldi	r30, 0x62	; 98
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	90 81       	ld	r25, Z
 600:	91 50       	subi	r25, 0x01	; 1
 602:	90 83       	st	Z, r25
				if (TimeSetting[0] > 23)
 604:	98 31       	cpi	r25, 0x18	; 24
 606:	18 f0       	brcs	.+6      	; 0x60e <ButtonPA2+0x90>
				{
					TimeSetting[0] = 23;
 608:	97 e1       	ldi	r25, 0x17	; 23
 60a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__data_end>
				}
			}
			
			if (Mode == 1 && Setting == 1)                   // Декремент минут
 60e:	81 30       	cpi	r24, 0x01	; 1
 610:	71 f4       	brne	.+28     	; 0x62e <ButtonPA2+0xb0>
 612:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <Setting>
 616:	91 30       	cpi	r25, 0x01	; 1
 618:	51 f4       	brne	.+20     	; 0x62e <ButtonPA2+0xb0>
			{
				TimeSetting[1]--;
 61a:	e2 e6       	ldi	r30, 0x62	; 98
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	91 81       	ldd	r25, Z+1	; 0x01
 620:	91 50       	subi	r25, 0x01	; 1
 622:	91 83       	std	Z+1, r25	; 0x01
				if (TimeSetting[1] > 59)
 624:	9c 33       	cpi	r25, 0x3C	; 60
 626:	18 f0       	brcs	.+6      	; 0x62e <ButtonPA2+0xb0>
				{
					TimeSetting[1] = 59;
 628:	9b e3       	ldi	r25, 0x3B	; 59
 62a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
				}
			}
			
			if (Mode == 1 && Setting == 2)                   // Декремент секунд
 62e:	81 30       	cpi	r24, 0x01	; 1
 630:	d9 f5       	brne	.+118    	; 0x6a8 <ButtonPA2+0x12a>
 632:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Setting>
 636:	82 30       	cpi	r24, 0x02	; 2
 638:	b9 f5       	brne	.+110    	; 0x6a8 <ButtonPA2+0x12a>
			{
				TimeSetting[2]--;
 63a:	e2 e6       	ldi	r30, 0x62	; 98
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	82 81       	ldd	r24, Z+2	; 0x02
 640:	81 50       	subi	r24, 0x01	; 1
 642:	82 83       	std	Z+2, r24	; 0x02
				if (TimeSetting[2] > 59)
 644:	8c 33       	cpi	r24, 0x3C	; 60
 646:	80 f1       	brcs	.+96     	; 0x6a8 <ButtonPA2+0x12a>
				{
					TimeSetting[2] = 59;
 648:	8b e3       	ldi	r24, 0x3B	; 59
 64a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end+0x2>
 64e:	08 95       	ret
		}
	}
	// Кнопка отпущена
	else
	{
		if (DisconnectorPA2 > 0)
 650:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <DisconnectorPA2>
 654:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <DisconnectorPA2+0x1>
 658:	89 2b       	or	r24, r25
 65a:	81 f0       	breq	.+32     	; 0x67c <ButtonPA2+0xfe>
 65c:	8b e7       	ldi	r24, 0x7B	; 123
 65e:	8a 95       	dec	r24
 660:	f1 f7       	brne	.-4      	; 0x65e <ButtonPA2+0xe0>
		{
			_delay_us(50);
			DisconnectorPA2--;
 662:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <DisconnectorPA2>
 666:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <DisconnectorPA2+0x1>
 66a:	01 97       	sbiw	r24, 0x01	; 1
 66c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <DisconnectorPA2+0x1>
 670:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <DisconnectorPA2>
			HeatPA2 = 0;
 674:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <HeatPA2+0x1>
 678:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <HeatPA2>
		}
		
		if (DisconnectorHeatPA2 > 0)
 67c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <DisconnectorHeatPA2>
 680:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <DisconnectorHeatPA2+0x1>
 684:	89 2b       	or	r24, r25
 686:	81 f0       	breq	.+32     	; 0x6a8 <ButtonPA2+0x12a>
 688:	2b e7       	ldi	r18, 0x7B	; 123
 68a:	2a 95       	dec	r18
 68c:	f1 f7       	brne	.-4      	; 0x68a <ButtonPA2+0x10c>
		{
			_delay_us(50);
			DisconnectorHeatPA2--;
 68e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <DisconnectorHeatPA2>
 692:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <DisconnectorHeatPA2+0x1>
 696:	01 97       	sbiw	r24, 0x01	; 1
 698:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <DisconnectorHeatPA2+0x1>
 69c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <DisconnectorHeatPA2>
			HeatPA2 = 0;
 6a0:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <HeatPA2+0x1>
 6a4:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <HeatPA2>
 6a8:	08 95       	ret

000006aa <main>:



int main(void)
{
	setup();
 6aa:	0e 94 49 00 	call	0x92	; 0x92 <setup>
	
	while (1)
	{	
		ButtonPA0();
 6ae:	0e 94 88 01 	call	0x310	; 0x310 <ButtonPA0>
		ButtonPA1();
 6b2:	0e 94 2b 02 	call	0x456	; 0x456 <ButtonPA1>
		ButtonPA2();
 6b6:	0e 94 bf 02 	call	0x57e	; 0x57e <ButtonPA2>
		
		switch(Mode)
 6ba:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Mode>
 6be:	88 23       	and	r24, r24
 6c0:	19 f0       	breq	.+6      	; 0x6c8 <main+0x1e>
 6c2:	81 30       	cpi	r24, 0x01	; 1
 6c4:	21 f0       	breq	.+8      	; 0x6ce <main+0x24>
 6c6:	f3 cf       	rjmp	.-26     	; 0x6ae <main+0x4>
		{
			case 0:
				Mode0();
 6c8:	0e 94 6d 00 	call	0xda	; 0xda <Mode0>
				break;
 6cc:	f0 cf       	rjmp	.-32     	; 0x6ae <main+0x4>
			case 1:
				Mode1();
 6ce:	0e 94 2d 01 	call	0x25a	; 0x25a <Mode1>
				break;				
 6d2:	ed cf       	rjmp	.-38     	; 0x6ae <main+0x4>

000006d4 <__vector_10>:




ISR(TIMER0_COMP_vect) // Может сделать флаги просто и все,
{
 6d4:	1f 92       	push	r1
 6d6:	0f 92       	push	r0
 6d8:	0f b6       	in	r0, 0x3f	; 63
 6da:	0f 92       	push	r0
 6dc:	11 24       	eor	r1, r1
 6de:	8f 93       	push	r24
 6e0:	ef 93       	push	r30
 6e2:	ff 93       	push	r31
	// Инкремент счетчика (в секунде 30 счетчиков)
	TimeCounter++;
 6e4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <TimeCounter>
 6e8:	8f 5f       	subi	r24, 0xFF	; 255
 6ea:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <TimeCounter>
	
	// Если набралось 30 счетчиков то..
	if (TimeCounter == 30)
 6ee:	8e 31       	cpi	r24, 0x1E	; 30
 6f0:	29 f5       	brne	.+74     	; 0x73c <__vector_10+0x68>
	{
		TimeCurrent[2]++;                      // Инкремент секунды         
 6f2:	e5 e6       	ldi	r30, 0x65	; 101
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	82 81       	ldd	r24, Z+2	; 0x02
 6f8:	8f 5f       	subi	r24, 0xFF	; 255
 6fa:	82 83       	std	Z+2, r24	; 0x02
		TimeCounter = 0;	
 6fc:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <TimeCounter>

		if (TimeCurrent[2] >= 60)              // Если набралось 60 секунд то..
 700:	8c 33       	cpi	r24, 0x3C	; 60
 702:	90 f0       	brcs	.+36     	; 0x728 <__vector_10+0x54>
		{
			TimeCurrent[1]++;                  // Инкремент минуты 
 704:	81 81       	ldd	r24, Z+1	; 0x01
 706:	8f 5f       	subi	r24, 0xFF	; 255
 708:	81 83       	std	Z+1, r24	; 0x01
			TimeCurrent[2] = 0;
 70a:	12 82       	std	Z+2, r1	; 0x02
				
				if (TimeCurrent[1] >= 60)      // Если набралось 60 минут то..
 70c:	8c 33       	cpi	r24, 0x3C	; 60
 70e:	20 f0       	brcs	.+8      	; 0x718 <__vector_10+0x44>
				{
					TimeCurrent[0]++;          // Инкремент часа
 710:	80 81       	ld	r24, Z
 712:	8f 5f       	subi	r24, 0xFF	; 255
 714:	80 83       	st	Z, r24
					TimeCurrent[1] = 0;
 716:	11 82       	std	Z+1, r1	; 0x01
				}
				
					if (TimeCurrent[0] >= 24)  // Если набралось 24 часа то..
 718:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <TimeCurrent>
 71c:	88 31       	cpi	r24, 0x18	; 24
 71e:	20 f0       	brcs	.+8      	; 0x728 <__vector_10+0x54>
					{
						TimeCurrent[0] = 0;
 720:	e5 e6       	ldi	r30, 0x65	; 101
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	10 82       	st	Z, r1
						TimeCurrent[1] = 0;
 726:	11 82       	std	Z+1, r1	; 0x01
						TimeCurrent[2] = 0;
					}			
		}
					
		// Определение четности
    	if (TimeCurrent[2] % 2 == 0)
 728:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <TimeCurrent+0x2>
 72c:	80 fd       	sbrc	r24, 0
 72e:	04 c0       	rjmp	.+8      	; 0x738 <__vector_10+0x64>
    	{
			TimeParity = 1;
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <TimeParity>
 736:	02 c0       	rjmp	.+4      	; 0x73c <__vector_10+0x68>
    	}
    	else
		{
			TimeParity = 0;
 738:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <TimeParity>
		}
	}
}
 73c:	ff 91       	pop	r31
 73e:	ef 91       	pop	r30
 740:	8f 91       	pop	r24
 742:	0f 90       	pop	r0
 744:	0f be       	out	0x3f, r0	; 63
 746:	0f 90       	pop	r0
 748:	1f 90       	pop	r1
 74a:	18 95       	reti

0000074c <__divmodhi4>:
 74c:	97 fb       	bst	r25, 7
 74e:	07 2e       	mov	r0, r23
 750:	16 f4       	brtc	.+4      	; 0x756 <__divmodhi4+0xa>
 752:	00 94       	com	r0
 754:	07 d0       	rcall	.+14     	; 0x764 <__divmodhi4_neg1>
 756:	77 fd       	sbrc	r23, 7
 758:	09 d0       	rcall	.+18     	; 0x76c <__divmodhi4_neg2>
 75a:	0e 94 ba 03 	call	0x774	; 0x774 <__udivmodhi4>
 75e:	07 fc       	sbrc	r0, 7
 760:	05 d0       	rcall	.+10     	; 0x76c <__divmodhi4_neg2>
 762:	3e f4       	brtc	.+14     	; 0x772 <__divmodhi4_exit>

00000764 <__divmodhi4_neg1>:
 764:	90 95       	com	r25
 766:	81 95       	neg	r24
 768:	9f 4f       	sbci	r25, 0xFF	; 255
 76a:	08 95       	ret

0000076c <__divmodhi4_neg2>:
 76c:	70 95       	com	r23
 76e:	61 95       	neg	r22
 770:	7f 4f       	sbci	r23, 0xFF	; 255

00000772 <__divmodhi4_exit>:
 772:	08 95       	ret

00000774 <__udivmodhi4>:
 774:	aa 1b       	sub	r26, r26
 776:	bb 1b       	sub	r27, r27
 778:	51 e1       	ldi	r21, 0x11	; 17
 77a:	07 c0       	rjmp	.+14     	; 0x78a <__udivmodhi4_ep>

0000077c <__udivmodhi4_loop>:
 77c:	aa 1f       	adc	r26, r26
 77e:	bb 1f       	adc	r27, r27
 780:	a6 17       	cp	r26, r22
 782:	b7 07       	cpc	r27, r23
 784:	10 f0       	brcs	.+4      	; 0x78a <__udivmodhi4_ep>
 786:	a6 1b       	sub	r26, r22
 788:	b7 0b       	sbc	r27, r23

0000078a <__udivmodhi4_ep>:
 78a:	88 1f       	adc	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	5a 95       	dec	r21
 790:	a9 f7       	brne	.-22     	; 0x77c <__udivmodhi4_loop>
 792:	80 95       	com	r24
 794:	90 95       	com	r25
 796:	bc 01       	movw	r22, r24
 798:	cd 01       	movw	r24, r26
 79a:	08 95       	ret

0000079c <_exit>:
 79c:	f8 94       	cli

0000079e <__stop_program>:
 79e:	ff cf       	rjmp	.-2      	; 0x79e <__stop_program>
